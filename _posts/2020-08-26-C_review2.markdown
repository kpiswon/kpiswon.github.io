---
layout: post
title:  "C언어 한 번에 기억 되살리기 - 개발환경 구축부터 주요 문법까지(PART II)"
date:   2020-08-30 02:30:00
categories: C_Programming
tags : [C언어, C, 개발환경, Visual Studio, 배열, 포인터, 반복문, switch문, for문, 조건문, 삼항연산자, ]
---

[이어서](https://kpiswon.github.io/c_programming/2020/08/26/C_review.html) 기본적으로 자주 쓰이는 함수들을 정리해보겠다. 
printf, 반복문 등 기본적인 것들을 너무 상세히 서술하기보다 기억을 되살릴 수 있는 정도로만 서술하겠다.

---

### printf 함수  

* 특수문자 종류

|특수 문자|의미|
|:---:|:---:|
|\a|경고음|
|\b|백스페이스|
|\f|폼피드|
|\n|개행|
|\r|캐리지 리턴|
|\t|수평탭|
|\v|수직탭
|\ '|작은 따옴표 출력
|\ "|큰 따옴표 출력
|\?|물음표 출력

---

### 반복문

> 
###### 1. while 문  
```
while (조건){
    조건 만족 시
}
조건 불만족 시
```

>
###### 2. do ~ while (;에 주의한다)  
```
do{
    조건 만족 시
} while (조건);
조건 불만족 시
```  
while문과 다르게 조건 만족 시 코드를 먼저 실행하고 조건 검사를 나중에 진행한다.

>
###### 3. for문  
예시로 이해하는 것이 더 빠르다.  
```
for(int num=0; num<3; num++)
   printf("Hi");
```

---


### 조건문

> 
###### 1. if문
```
if(조건검사){
   조건 맞으면
}
else if(조건검사2){
   조건2 맞으면
}
else 
   조건검사 다 아니면
```
* 예시  
```
if(num % 3 == 0 || num % 4 == 0){
    printf("%d", num);
}
else if (num = 0){
    printf("%d", num);
}
else{
    printf("몰라!")
}
```

>
###### 2. 삼항연산자
```
(조건검사) ? (data1) : (data2) ;   
조건이 맞으면 data1, 틀리면 data2
```  
* 예시
```
int abs;
abs = (num > 0) ? (num) : (num+2);
```

>
###### 3. break 문  
자신을 감싸는 반복문을 빠져나감
* 예시
```  
for(int x; x>20; x++){
    if(x%7 == 0)
        break;
}
```  
위 예시의 경우 for문을 아예 탈출한다.

>
###### 4. continue 문  
자신을 감싸는 반복문을 빠져나가지는 않고, 반복 조건을 확인하러 다시 올라감
* 예시 
```
for(int x; x>20; x++){
    if(x%7 == 0)
        continue;
}
```  
위 예시의 경우 x++하여 for문의 조건검사를 하러 간다.

>
###### switch 문
* 예시  
> {% highlight ruby %}
#include <stdio.h>
int main(void){
    char cho;
    printf("M: 오전, A: 오후, E: 저녁 \n");
    printf("입력: ");
    scanf("%c", &cho);

    switch (cho){
        case 'M': // break  안쓸 때 적절한 활용
        case 'm':
            printf("morning \n");
            break;
        case 'A':
        case 'a':
            printf("afternoon \n");
            break;
        case 'E':
        case 'e':
            printf("evening \n");
            break;
        default:
            "올바른 값을 입력하지 않았습니다."
    }
    return 0;
}
 {% endhighlight %}

---

### 함수
  
###### 예시1 (전달 인자 O, 반환 값 O)
```
int Add (int num1, int num2){
    int result = num1 + num2;
    return result;
}
```

```
int main(void){
    int sum;
    sum = Add(3,5);
    printf(%d \n, sum);
    return 0;
}
```

###### 예시2 (전달 인자 O, 반환 값 X)
```
void ShowAddResult(int num){
    printf("덧셈 결과 출력 : %d \n", num);
}
```

###### 예시3 (전달 인자 X, 반환 값 O)
```
int ReadNum(void){
    int num;
    scanf("%d", &num);
    return num;
}
```

###### 예시4 (전달 인자 X, 반환 값 X)
```
void Explain(void){
    printf("두 개의 정수 입력: ");
}
```

#### 종합
{% highlight ruby %}
int main(void){
    int num1, num2, sum;
    Explain();
    num1 = ReadNum(), num2 = ReadNum(); //scanf는 띄어쓰기 기준으로 띄어쓰기까지 읽는다
    sum = Add(num1, num2);
    ShowAddResult(sum);
    return 0;
}
{%endhighlight%}

---

### 배열
> __int Arrayname[4];__  
int : 배열의 자료형  
Arrayname : 배열의 이름  
[4] : 배열의 길이  

> __int TwoDimArr[5][5];__  
> __int ThreeDimArr[3][3][3];__  
> 1차원 뿐만 아니라, 2,3차원의 배열도 선언 가능하다.

###### __예시 1__  
```
int arr[5] = {1,2}; //부족한 부분은 0으로 채워짐
```

* 결과 1   
arr = {1,2,0,0,0}


###### __예시 2__
```
char str[14] = "GOOD MORNING!";
```

* 결과 2  
str = {G,O,O,D, ,M,O,R,N,I,N,G,!,\0}  
널 문자(\0)은 문자열의 끝을 의미한다.

---
### 포인터  
> 정수 7이 저장된 int 형 변수 num을 선언하고, 이것에 대한 포인터 변수 pnum을 선언한 다음, pnum에 변수 num의 주소값을 저장하자.  

```
int main(void){
    int num = 7;
    int * pnum; //만약 num이 double형이었다면 double * pnum;
    pnum = &num;

    int * pnum2 = NULL; // 초기화하지 않는 경우에는 널 포인터로 초기화하는 것이 안전하다.
}
```

___

최종수정일 2020.08.31



> ###### References
> 고려대학교 202R 자료구조, 김민수  
> 고려대학교 181R 컴퓨터언어 및 실습, 천지영 

{% highlight ruby %}
print("hello, neighbors!")
print("Sungwon Kim © 2020 • All rights reserved.")
{% endhighlight %}

[Github][githuburl]

[githuburl]: https://github.com/kpiswon

